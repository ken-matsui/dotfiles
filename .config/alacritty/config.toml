[general]
  # Live config reload (changes require restart)
  live_config_reload = true

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
[env]
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM = "xterm-256color"

# Window dimensions (changes require restart)
#
# Number of lines/columns (not pixels) in the terminal. The number of columns
# must be at least `2`, while using a value of `0` for columns and lines will
# fall back to the window manager's recommended size.
[window]
  # Spread additional padding evenly around the terminal content.
  dynamic_padding = true

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode = "Fullscreen"

[window.padding]
  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  x = 5
  y = 5

# Font configuration
[font]
  # Point size
  size = 12.5

# Offset is the extra space around each character. `offset.y` can be thought
# of as modifying the line spacing, and `offset.x` as modifying the letter
# spacing.
# [font.offset]
#   x = 0
#   y = 0

[font.normal]
  family = "JetBrainsMono Nerd Font"
  # Style can be specified to pick a specific face.
  style = "Regular"

[font.bold]
  family = "JetBrainsMono Nerd Font"
  # Style can be specified to pick a specific face.
  # style = "Bold"

[font.italic]
  family = "JetBrainsMono Nerd Font"
  # Style can be specified to pick a specific face.
  # style = "Italic"

# Colors (Material Deep Ocean)
[colors.primary]
  background = "0x0F111A"
  foreground = "0xA6ACCD"

[colors.normal]
  black = "0x000000"
  blue = "0x6E98EB"
  cyan = "0x71C6E7"
  green = "0xABCF76"
  magenta = "0xB480D6"
  red = "0xDC6068"
  white = "0xEEFFFF"
  yellow = "0xE6B455"

[colors.bright]
  black = "0x464B5D" # Disabled color: for zsh-autosuggestions
  blue = "0x82AAFF"
  cyan = "0x89DDFF"
  green = "0xC3E88D"
  magenta = "0xC792EA"
  red = "0xF07178"
  white = "0xEEFFFF"
  yellow = "0xFFCB6B"

[selection]
  # This string contains all characters that are used as separators for
  # "semantic words" in Alacritty.
  semantic_escape_chars = ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard = false

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#
[[keyboard.bindings]]
  action = "ResetFontSize"
  key = "Key0"
  mods = "Command"

[[keyboard.bindings]]
  action = "IncreaseFontSize"
  key = "Equals"
  mods = "Command"

[[keyboard.bindings]]
  action = "DecreaseFontSize"
  key = "Minus"
  mods = "Command"

[cursor.style]
  # Cursor shape
  #
  # Values for `shape`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  shape = "Beam"

  # Cursor blinking state
  #
  # Values for `blinking`:
  #   - Never: Prevent the cursor from ever blinking
  #   - Off: Disable blinking by default
  #   - On: Enable blinking by default
  #   - Always: Force the cursor to always blink
  blinking = "On"

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g.
# `/bin/fish`. Entries in `shell.args` are passed unmodified as arguments to the
# shell.
#
# Default:
#   - (Linux/BSD/macOS) `$SHELL` or the user's login shell, if `$SHELL` is unset
#   - (Windows) powershell
[terminal.shell]
  program = "/bin/zsh"
  args = ["-l", "-c", "tmux new-session -A -s alacritty"]
