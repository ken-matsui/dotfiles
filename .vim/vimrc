" Use plain vim
" when vim was invoked by 'sudo' command
" or, invoked as 'git difftool'
if exists('$SUDO_USER') || exists('$GIT_DIR')
  finish
endif

" =====================
" Options
" =====================

" Set file encoding as UTF-8
set encoding=utf-8
" Enable true color
set termguicolors
" Enable syntax highlighting (automatically disabled when tree-sitter is enabled)
syntax enable

" Confirm on quit
set confirm

" Don't create backup
set nobackup
set nowritebackup
" Disable swap file
set noswapfile

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appeared/became resolved
set signcolumn=yes

" Show relative column number
set number
set relativenumber

" Highlight column number
set cursorline

" Visualize invisible string
set list
set listchars=eol:$,tab:>-,trail:Â·,extends:>,precedes:<

" Indentation
set smarttab
set autoindent
set softtabstop=0

" Always display statusline.
set laststatus=2

" Yank texts to system clipboard
if has('unnamedplus')
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

" Set <Leader> as the space key
let mapleader = " "

" Load ctags if exists
set tags=./tags;

" Automatic word wrapping
set textwidth=79
autocmd FileType gitcommit setlocal textwidth=72
autocmd FileType mail setlocal textwidth=72
set formatoptions-=ro formatoptions+=cqlt

" Enable spell check
set spelllang=en_us

autocmd FileType text setlocal spell complete+=kspell
autocmd FileType gitcommit setlocal spell complete+=kspell
autocmd FileType mail setlocal spell complete+=kspell
autocmd FileType markdown setlocal spell complete+=kspell

" Save files when focus lost
augroup AutoSaveOnFocusLost
  autocmd!
  autocmd FocusLost * silent! wa
augroup END

" Change background color when focus lost
" TODO: need workaround with sunjon/Shade.nvim
augroup FocusBackground
  autocmd!
  autocmd FocusLost * hi Normal guibg=#1A1C29
  autocmd FocusGained * hi Normal guibg=#0F111A
augroup END

" =====================
" Syntax
" =====================

" Recognize .def files as C++
augroup CppFiletype
  autocmd!
  autocmd BufNewFile,BufRead *.def		set filetype=cpp
augroup END

" Set JFlex syntax
augroup filetype
  au BufRead,BufNewFile *.flex,*.jflex		set filetype=jflex
augroup END
au Syntax jflex so ~/.vim/syntax/jflex.vim

" Mojo
" Mojo files use either .mojo or .ðŸ”¥ as extension
au BufNewFile,BufRead *.mojo,*.ðŸ”¥		setf mojo
au Syntax mojo so ~/.vim/syntax/mojo.vim

" Cup
au BufNewFile,BufRead *.cup			setf cup
au Syntax cup so ~/.vim/syntax/cup.vim

" =====================
" Key Mappings
" =====================

"
" Normal Mode
"

" Treat ; as :
nnoremap ; :

" Visually move cursor
nnoremap j gj
nnoremap k gk

" Move to the beginning of line
nnoremap <S-h> ^
" Move to the end of line
nnoremap <S-l> $

" Buffer navigation
nnoremap <silent> <Leader>w :bdelete<Cr>

" Yank file path
nnoremap yp :let @+=expand("%") \| :echo "Copied file path to clipboard"<Cr>
" Yank absolute file path
nnoremap yap :let @+=expand("%:p") \| :echo "Copied absolute file path to clipboard"<Cr>
" Yank filename
nnoremap yn :let @+=expand("%:t") \| :echo "Copied filename to clipboard"<Cr>

" Expand :s to :%s///g
cnoreabbrev <expr> s getcmdtype() .. getcmdline() ==# ':s' ? [getchar(), ''][1] .. "%s///g<Left><Left>" : 's'

"
" Insert Mode
"

" Escape with jj & kk
inoremap jj <Esc>
inoremap kk <Esc>

"
" Visual Mode
"

" Indent
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
