#
# OS depending config
#
[includeIf "gitdir:/Users"]
  path = ~/.config/git/configs/macos
[includeIf "gitdir:/home"]
  path = ~/.config/git/configs/linux

#
# User
#
[user]
  name = Ken Matsui
  email = 26405363+ken-matsui@users.noreply.github.com
  signingkey = ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJLtNOwH8UCkUcpMNG4aSMNtzUtYaYzdc3awbXbzvAwY

[includeIf "hasconfig:remote.*.url:git@gitlab.cs.washington.edu:*/**"]
  path = ~/.config/git/configs/uw

#
# GPG
#
[gpg]
  format = ssh
[gpg "ssh"]
  allowedSignersFile = "~/.config/git/allowed_signers"
[commit]
  gpgsign = true
[tag]
  forceSignAnnotated = true

#
# Send email
#
[sendemail]
  smtpServer = smtp.uw.edu # works for both @uw.edu & @cs.washington.edu
  smtpServerPort = 587
  smtpEncryption = tls

#
# Branch
#
[init]
  defaultBranch = main
[fetch]
  prune = true
[pull]
  rebase = false
[push]
  default = current

#
# Diff
#
[core]
  pager = delta
  autocrlf = input
[interactive]
  diffFilter = delta --color-only

#
# Rebase
#
[sequence]
  editor = interactive-rebase-tool
[rebase]
  autostash = true

#
# Aliases
#
[alias]
  #
  # Helper aliases
  #
  # Show all git aliases
  alias = !git config --get-regexp ^alias | sed -e 's/^alias.//g' -e 's/ / = /1'
  # Print git config path
  path = "!echo ${XDG_CONFIG_HOME:-~/.config}/git"
  # Print functions path
  fn = "!echo $(git path)/fn"
  # Print info
  info = "!$(git fn)/info"
  # Print warning
  warn = "!$(git fn)/warn"
  # Print error
  err = "!$(git fn)/err"

  #
  # Git aliases
  #
  # Shorthand for status
  st = status
  # Shorthand for switch
  sw = switch
  # Generate gitignore
  ignore = "!gi() { curl -sL https://www.toptal.com/developers/gitignore/api/$@ ;}; gi"
  # Show current commit hash
  now = show --oneline -s
  # Stash with untracked files (-m 'name')
  save = stash push --include-untracked
  # Get all user.* config
  me = config --get-regexp user
  # Get my commits
  mine = !git shortlog -sne --author=\"$(git config user.name)\"
  # Get default branch name
  defbr = !git remote show origin | sed -n '/HEAD branch/s/.*: //p'
  # Get current branch name
  curbr = rev-parse --abbrev-ref HEAD
  # Check if current branch is the default branch
  on-defbr = "!$(git fn)/on_defbr"
  # Check if the origin URL is on GitHub
  on-gh = "!$(git fn)/on_gh"
  # Update the default branch and remove merged branches
  update = "!$(git fn)/update"
  # Get a parent commit from the argument
  parent = log --pretty=%P -n 1
  # Remove gitignored files
  rm-ignored = rm -r --cached .

#
# Git LFS
#
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
