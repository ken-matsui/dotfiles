#
# OS depending config
#
[includeIf "gitdir:/Users"]
  path = ~/.config/git/config-macos
[includeIf "gitdir:/home"]
  path = ~/.config/git/config-linux

#
# User
#
[user]
  name = Ken Matsui
  email = 26405363+ken-matsui@users.noreply.github.com
  signingkey = ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJLtNOwH8UCkUcpMNG4aSMNtzUtYaYzdc3awbXbzvAwY

#
# GPG
#
[gpg]
  format = ssh
[gpg "ssh"]
  allowedSignersFile = "~/.config/git/allowed_signers"
[commit]
  gpgsign = true
[tag]
  forceSignAnnotated = true

#
# Send email
#
[sendemail]
  smtpServer = smtp.uw.edu # works for both @uw.edu & @cs.washington.edu
  smtpServerPort = 587
  smtpEncryption = tls
[credential]
  helper = store

#
# Branch
#
[init]
  defaultBranch = main
[fetch]
  prune = true
[pull]
  ff = only
[push]
  default = current

#
# Diff
#
[core]
  pager = delta
  autocrlf = input
[interactive]
  diffFilter = delta --color-only

#
# Rebase
#
[sequence]
  editor = interactive-rebase-tool
[rebase]
  autostash = true

#
# Aliases
#
[alias]
  # Show all git aliases
  alias = !git config --get-regexp ^alias | sed -e 's/^alias.//g' -e 's/ / = /1'
  # Shorthand for status
  su = status
  # Shorthand for switch
  si = switch
  # Unstage files
  unstage = restore --staged
  # Stash with untracked files (-m 'name')
  save = stash push --include-untracked
  # Uncommit the most recent commit
  uncommit = reset --soft HEAD~1
  # Get all user.* config
  me = config --get-regexp user
  # Get my commits
  mine = !git shortlog -sne --author=\"$(git config user.name)\"
  # Get default branch name
  defbr = !git remote show origin | sed -n '/HEAD branch/s/.*: //p'
  # Get current branch name
  curbr = rev-parse --abbrev-ref HEAD
  # Check if current branch is the default branch
  on-defbr = "![ $(git defbr) = $(git curbr) ] || { echo 'not on the default branch' && exit 1; }"
  # Check if the origin URL is on GitHub
  on-gh = "!git remote get-url origin | grep -q 'github.com' || { echo 'not on GitHub' && exit 1; }"
  # Update the default branch and remove merged branches
  update = !git on-defbr && git pull origin "$(git defbr)" && git on-gh && gh poi
  # Get a parent commit from the argument
  parent = "!f(){ git log --pretty=%P -n 1 $1;};f"
  # Create only one commit from the history
  create-one = !git reset $(git merge-base main $(git branch --show-current)) && git add -A && git commit
  # Squash all commits into one
  squash-all = "!f(){ git reset $(git commit-tree HEAD^{tree} -m \"${1:-A new start}\");};f"
  # Remove gitignored files
  rm-ignored = rm -r --cached .

#
# Git LFS
#
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
